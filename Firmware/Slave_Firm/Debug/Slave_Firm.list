
Slave_Firm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002938  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a78  08002a78  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a78  08002a78  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a78  08002a78  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08002a8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08002a8c  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001022c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002608  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00032868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00033560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000027e1  00000000  00000000  00034150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121ce  00000000  00000000  00036931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080b06  00000000  00000000  00048aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c9605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d5c  00000000  00000000  000c9658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080029d8 	.word	0x080029d8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080029d8 	.word	0x080029d8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	240c      	movs	r4, #12
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2314      	movs	r3, #20
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f002 fae3 	bl	80029c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b36      	ldr	r3, [pc, #216]	; (80004dc <MX_GPIO_Init+0xf0>)
 8000404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000406:	4b35      	ldr	r3, [pc, #212]	; (80004dc <MX_GPIO_Init+0xf0>)
 8000408:	2120      	movs	r1, #32
 800040a:	430a      	orrs	r2, r1
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
 800040e:	4b33      	ldr	r3, [pc, #204]	; (80004dc <MX_GPIO_Init+0xf0>)
 8000410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000412:	2220      	movs	r2, #32
 8000414:	4013      	ands	r3, r2
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b30      	ldr	r3, [pc, #192]	; (80004dc <MX_GPIO_Init+0xf0>)
 800041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041e:	4b2f      	ldr	r3, [pc, #188]	; (80004dc <MX_GPIO_Init+0xf0>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
 8000426:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <MX_GPIO_Init+0xf0>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000432:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <MX_GPIO_Init+0xf0>)
 8000434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000436:	4b29      	ldr	r3, [pc, #164]	; (80004dc <MX_GPIO_Init+0xf0>)
 8000438:	2102      	movs	r1, #2
 800043a:	430a      	orrs	r2, r1
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
 800043e:	4b27      	ldr	r3, [pc, #156]	; (80004dc <MX_GPIO_Init+0xf0>)
 8000440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000442:	2202      	movs	r2, #2
 8000444:	4013      	ands	r3, r2
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800044a:	23a0      	movs	r3, #160	; 0xa0
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	2108      	movs	r1, #8
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fdc0 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RL1_Pin|RL2_Pin|RL3_Pin, GPIO_PIN_RESET);
 8000458:	23e0      	movs	r3, #224	; 0xe0
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	4820      	ldr	r0, [pc, #128]	; (80004e0 <MX_GPIO_Init+0xf4>)
 800045e:	2200      	movs	r2, #0
 8000460:	0019      	movs	r1, r3
 8000462:	f000 fdb9 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2204      	movs	r2, #4
 800046a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2200      	movs	r2, #0
 8000470:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	193a      	adds	r2, r7, r4
 800047a:	23a0      	movs	r3, #160	; 0xa0
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	0011      	movs	r1, r2
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fc45 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2208      	movs	r2, #8
 800048a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2201      	movs	r2, #1
 8000490:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	193a      	adds	r2, r7, r4
 80004a0:	23a0      	movs	r3, #160	; 0xa0
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 fc32 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RL1_Pin|RL2_Pin|RL3_Pin;
 80004ac:	0021      	movs	r1, r4
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	22e0      	movs	r2, #224	; 0xe0
 80004b2:	0092      	lsls	r2, r2, #2
 80004b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2201      	movs	r2, #1
 80004ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	2202      	movs	r2, #2
 80004c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <MX_GPIO_Init+0xf4>)
 80004cc:	0019      	movs	r1, r3
 80004ce:	0010      	movs	r0, r2
 80004d0:	f000 fc1e 	bl	8000d10 <HAL_GPIO_Init>

}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b009      	add	sp, #36	; 0x24
 80004da:	bd90      	pop	{r4, r7, pc}
 80004dc:	40021000 	.word	0x40021000
 80004e0:	50000400 	.word	0x50000400

080004e4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <MX_I2C2_Init+0x74>)
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <MX_I2C2_Init+0x78>)
 80004ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_I2C2_Init+0x74>)
 80004f0:	4a1b      	ldr	r2, [pc, #108]	; (8000560 <MX_I2C2_Init+0x7c>)
 80004f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <MX_I2C2_Init+0x74>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_I2C2_Init+0x74>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <MX_I2C2_Init+0x74>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000506:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_I2C2_Init+0x74>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <MX_I2C2_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_I2C2_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_I2C2_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_I2C2_Init+0x74>)
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fd77 	bl	8001014 <HAL_I2C_Init>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800052a:	f000 f8eb 	bl	8000704 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <MX_I2C2_Init+0x74>)
 8000530:	2100      	movs	r1, #0
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fe04 	bl	8001140 <HAL_I2CEx_ConfigAnalogFilter>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800053c:	f000 f8e2 	bl	8000704 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MX_I2C2_Init+0x74>)
 8000542:	2100      	movs	r1, #0
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fe47 	bl	80011d8 <HAL_I2CEx_ConfigDigitalFilter>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800054e:	f000 f8d9 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000028 	.word	0x20000028
 800055c:	40005800 	.word	0x40005800
 8000560:	00303d5b 	.word	0x00303d5b

08000564 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b08b      	sub	sp, #44	; 0x2c
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	2414      	movs	r4, #20
 800056e:	193b      	adds	r3, r7, r4
 8000570:	0018      	movs	r0, r3
 8000572:	2314      	movs	r3, #20
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f002 fa26 	bl	80029c8 <memset>
  if(i2cHandle->Instance==I2C2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <HAL_I2C_MspInit+0x8c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d130      	bne.n	80005e8 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <HAL_I2C_MspInit+0x90>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <HAL_I2C_MspInit+0x90>)
 800058c:	2102      	movs	r1, #2
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <HAL_I2C_MspInit+0x90>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2202      	movs	r2, #2
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	22c0      	movs	r2, #192	; 0xc0
 80005a2:	0112      	lsls	r2, r2, #4
 80005a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a6:	0021      	movs	r1, r4
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2212      	movs	r2, #18
 80005ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2206      	movs	r2, #6
 80005be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <HAL_I2C_MspInit+0x94>)
 80005c4:	0019      	movs	r1, r3
 80005c6:	0010      	movs	r0, r2
 80005c8:	f000 fba2 	bl	8000d10 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_I2C_MspInit+0x90>)
 80005ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_I2C_MspInit+0x90>)
 80005d2:	2180      	movs	r1, #128	; 0x80
 80005d4:	03c9      	lsls	r1, r1, #15
 80005d6:	430a      	orrs	r2, r1
 80005d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_I2C_MspInit+0x90>)
 80005dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	03db      	lsls	r3, r3, #15
 80005e2:	4013      	ands	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b00b      	add	sp, #44	; 0x2c
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40005800 	.word	0x40005800
 80005f4:	40021000 	.word	0x40021000
 80005f8:	50000400 	.word	0x50000400

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char temp[10] = {0};
 8000602:	230c      	movs	r3, #12
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	3304      	adds	r3, #4
 800060c:	2206      	movs	r2, #6
 800060e:	2100      	movs	r1, #0
 8000610:	0018      	movs	r0, r3
 8000612:	f002 f9d9 	bl	80029c8 <memset>
  char hum[10] = {0};
 8000616:	003b      	movs	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	3304      	adds	r3, #4
 800061e:	2206      	movs	r2, #6
 8000620:	2100      	movs	r1, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f002 f9d0 	bl	80029c8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fa14 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f822 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f7ff fedc 	bl	80003ec <MX_GPIO_Init>
  MX_I2C2_Init();
 8000634:	f7ff ff56 	bl	80004e4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000638:	f000 f86a 	bl	8000710 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800063c:	f000 f930 	bl	80008a0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOB, RL1_Pin, GPIO_PIN_SET);
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <main+0x74>)
 8000642:	2201      	movs	r2, #1
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fcc6 	bl	8000fd8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800064c:	23fa      	movs	r3, #250	; 0xfa
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fa85 	bl	8000b60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, RL1_Pin, GPIO_PIN_RESET);
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <main+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fcbb 	bl	8000fd8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000662:	23fa      	movs	r3, #250	; 0xfa
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fa7a 	bl	8000b60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, RL1_Pin, GPIO_PIN_SET);
 800066c:	e7e8      	b.n	8000640 <main+0x44>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	50000400 	.word	0x50000400

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b093      	sub	sp, #76	; 0x4c
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2334      	movs	r3, #52	; 0x34
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f002 f99f 	bl	80029c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2310      	movs	r3, #16
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f002 f998 	bl	80029c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fde7 	bl	8001270 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2202      	movs	r2, #2
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2240      	movs	r2, #64	; 0x40
 80006ba:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fe1f 	bl	8001308 <HAL_RCC_OscConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006ce:	f000 f819 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2100      	movs	r1, #0
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 f91a 	bl	8001928 <HAL_RCC_ClockConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006f8:	f000 f804 	bl	8000704 <Error_Handler>
  }
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b013      	add	sp, #76	; 0x4c
 8000702:	bd90      	pop	{r4, r7, pc}

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_SPI1_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_SPI1_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_SPI1_Init+0x74>)
 800071c:	2282      	movs	r2, #130	; 0x82
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_SPI1_Init+0x74>)
 800072a:	22e0      	movs	r2, #224	; 0xe0
 800072c:	00d2      	lsls	r2, r2, #3
 800072e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_SPI1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_SPI1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_SPI1_Init+0x74>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	02d2      	lsls	r2, r2, #11
 8000742:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_SPI1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_SPI1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_SPI1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_SPI1_Init+0x74>)
 800075e:	2207      	movs	r2, #7
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_SPI1_Init+0x74>)
 800076a:	2208      	movs	r2, #8
 800076c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_SPI1_Init+0x74>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fba9 	bl	8001ec8 <HAL_SPI_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800077a:	f7ff ffc3 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000007c 	.word	0x2000007c
 8000788:	40013000 	.word	0x40013000

0800078c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800078c:	b590      	push	{r4, r7, lr}
 800078e:	b08b      	sub	sp, #44	; 0x2c
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	2414      	movs	r4, #20
 8000796:	193b      	adds	r3, r7, r4
 8000798:	0018      	movs	r0, r3
 800079a:	2314      	movs	r3, #20
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f002 f912 	bl	80029c8 <memset>
  if(spiHandle->Instance==SPI1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <HAL_SPI_MspInit+0x8c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d130      	bne.n	8000810 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <HAL_SPI_MspInit+0x90>)
 80007b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <HAL_SPI_MspInit+0x90>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	0149      	lsls	r1, r1, #5
 80007b8:	430a      	orrs	r2, r1
 80007ba:	641a      	str	r2, [r3, #64]	; 0x40
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <HAL_SPI_MspInit+0x90>)
 80007be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	015b      	lsls	r3, r3, #5
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_SPI_MspInit+0x90>)
 80007cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <HAL_SPI_MspInit+0x90>)
 80007d0:	2101      	movs	r1, #1
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_SPI_MspInit+0x90>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007da:	2201      	movs	r2, #1
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007e2:	0021      	movs	r1, r4
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	22f0      	movs	r2, #240	; 0xf0
 80007e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2202      	movs	r2, #2
 80007ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000802:	187a      	adds	r2, r7, r1
 8000804:	23a0      	movs	r3, #160	; 0xa0
 8000806:	05db      	lsls	r3, r3, #23
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fa80 	bl	8000d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b00b      	add	sp, #44	; 0x2c
 8000816:	bd90      	pop	{r4, r7, pc}
 8000818:	40013000 	.word	0x40013000
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	2101      	movs	r1, #1
 800082e:	430a      	orrs	r2, r1
 8000830:	641a      	str	r2, [r3, #64]	; 0x40
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	2201      	movs	r2, #1
 8000838:	4013      	ands	r3, r2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0549      	lsls	r1, r1, #21
 8000848:	430a      	orrs	r2, r1
 800084a:	63da      	str	r2, [r3, #60]	; 0x3c
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_MspInit+0x44>)
 800084e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	055b      	lsls	r3, r3, #21
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	40021000 	.word	0x40021000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f94c 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a4:	4b23      	ldr	r3, [pc, #140]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008a6:	4a24      	ldr	r2, [pc, #144]	; (8000938 <MX_USART1_UART_Init+0x98>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008ac:	22e1      	movs	r2, #225	; 0xe1
 80008ae:	0252      	lsls	r2, r2, #9
 80008b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 fba4 	bl	8002038 <HAL_UART_Init>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008f4:	f7ff ff06 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART1_UART_Init+0x94>)
 80008fa:	2100      	movs	r1, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 ff5f 	bl	80027c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000906:	f7ff fefd 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_USART1_UART_Init+0x94>)
 800090c:	2100      	movs	r1, #0
 800090e:	0018      	movs	r0, r3
 8000910:	f001 ff96 	bl	8002840 <HAL_UARTEx_SetRxFifoThreshold>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000918:	f7ff fef4 	bl	8000704 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <MX_USART1_UART_Init+0x94>)
 800091e:	0018      	movs	r0, r3
 8000920:	f001 ff14 	bl	800274c <HAL_UARTEx_DisableFifoMode>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000928:	f7ff feec 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	200000e0 	.word	0x200000e0
 8000938:	40013800 	.word	0x40013800

0800093c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b091      	sub	sp, #68	; 0x44
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	232c      	movs	r3, #44	; 0x2c
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	0018      	movs	r0, r3
 800094a:	2314      	movs	r3, #20
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f002 f83a 	bl	80029c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000954:	2414      	movs	r4, #20
 8000956:	193b      	adds	r3, r7, r4
 8000958:	0018      	movs	r0, r3
 800095a:	2318      	movs	r3, #24
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 f832 	bl	80029c8 <memset>
  if(uartHandle->Instance==USART1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <HAL_UART_MspInit+0xbc>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d13f      	bne.n	80009ee <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800097a:	193b      	adds	r3, r7, r4
 800097c:	0018      	movs	r0, r3
 800097e:	f001 f97d 	bl	8001c7c <HAL_RCCEx_PeriphCLKConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000986:	f7ff febd 	bl	8000704 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_UART_MspInit+0xc0>)
 800098c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_UART_MspInit+0xc0>)
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	01c9      	lsls	r1, r1, #7
 8000994:	430a      	orrs	r2, r1
 8000996:	641a      	str	r2, [r3, #64]	; 0x40
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0xc0>)
 800099a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	01db      	lsls	r3, r3, #7
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0xc0>)
 80009a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <HAL_UART_MspInit+0xc0>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	430a      	orrs	r2, r1
 80009b0:	635a      	str	r2, [r3, #52]	; 0x34
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_UART_MspInit+0xc0>)
 80009b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b6:	2201      	movs	r2, #1
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009be:	212c      	movs	r1, #44	; 0x2c
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	22c0      	movs	r2, #192	; 0xc0
 80009c4:	00d2      	lsls	r2, r2, #3
 80009c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2202      	movs	r2, #2
 80009cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2201      	movs	r2, #1
 80009de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	187a      	adds	r2, r7, r1
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 f991 	bl	8000d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b011      	add	sp, #68	; 0x44
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40013800 	.word	0x40013800
 80009fc:	40021000 	.word	0x40021000

08000a00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a04:	f7ff ff47 	bl	8000896 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	; (8000a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <LoopForever+0xe>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	; (8000a4c <LoopForever+0x16>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a2e:	f001 ffa7 	bl	8002980 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a32:	f7ff fde3 	bl	80005fc <main>

08000a36 <LoopForever>:

LoopForever:
  b LoopForever
 8000a36:	e7fe      	b.n	8000a36 <LoopForever>
  ldr   r0, =_estack
 8000a38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a44:	08002a80 	.word	0x08002a80
  ldr r2, =_sbss
 8000a48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a4c:	20000178 	.word	0x20000178

08000a50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC1_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x3c>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_Init+0x3c>)
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	0049      	lsls	r1, r1, #1
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f000 f810 	bl	8000a94 <HAL_InitTick>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	701a      	strb	r2, [r3, #0]
 8000a7e:	e001      	b.n	8000a84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fece 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_InitTick+0x88>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d02b      	beq.n	8000b04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_InitTick+0x8c>)
 8000aae:	681c      	ldr	r4, [r3, #0]
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_InitTick+0x88>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	23fa      	movs	r3, #250	; 0xfa
 8000ab8:	0098      	lsls	r0, r3, #2
 8000aba:	f7ff fb21 	bl	8000100 <__udivsi3>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	0020      	movs	r0, r4
 8000ac4:	f7ff fb1c 	bl	8000100 <__udivsi3>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f913 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d112      	bne.n	8000afa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d80a      	bhi.n	8000af0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f8f2 	bl	8000ccc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_InitTick+0x90>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e00d      	b.n	8000b0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e008      	b.n	8000b0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afa:	230f      	movs	r3, #15
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e003      	b.n	8000b0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	781b      	ldrb	r3, [r3, #0]
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b005      	add	sp, #20
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	18d2      	adds	r2, r2, r3
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000174 	.word	0x20000174

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000174 	.word	0x20000174

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_GetTick>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	001a      	movs	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	189b      	adds	r3, r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	f7ff ffe0 	bl	8000b4c <HAL_GetTick>
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	0002      	movs	r2, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b7f      	cmp	r3, #127	; 0x7f
 8000bbc:	d828      	bhi.n	8000c10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbe:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <__NVIC_SetPriority+0xd4>)
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	33c0      	adds	r3, #192	; 0xc0
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	589b      	ldr	r3, [r3, r2]
 8000bce:	1dfa      	adds	r2, r7, #7
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	400a      	ands	r2, r1
 8000bd8:	00d2      	lsls	r2, r2, #3
 8000bda:	21ff      	movs	r1, #255	; 0xff
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	000a      	movs	r2, r1
 8000be0:	43d2      	mvns	r2, r2
 8000be2:	401a      	ands	r2, r3
 8000be4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	22ff      	movs	r2, #255	; 0xff
 8000bec:	401a      	ands	r2, r3
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	4003      	ands	r3, r0
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	481f      	ldr	r0, [pc, #124]	; (8000c7c <__NVIC_SetPriority+0xd4>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b25b      	sxtb	r3, r3
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	430a      	orrs	r2, r1
 8000c08:	33c0      	adds	r3, #192	; 0xc0
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c0e:	e031      	b.n	8000c74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <__NVIC_SetPriority+0xd8>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	0019      	movs	r1, r3
 8000c18:	230f      	movs	r3, #15
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	3b08      	subs	r3, #8
 8000c1e:	089b      	lsrs	r3, r3, #2
 8000c20:	3306      	adds	r3, #6
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	18d3      	adds	r3, r2, r3
 8000c26:	3304      	adds	r3, #4
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	1dfa      	adds	r2, r7, #7
 8000c2c:	7812      	ldrb	r2, [r2, #0]
 8000c2e:	0011      	movs	r1, r2
 8000c30:	2203      	movs	r2, #3
 8000c32:	400a      	ands	r2, r1
 8000c34:	00d2      	lsls	r2, r2, #3
 8000c36:	21ff      	movs	r1, #255	; 0xff
 8000c38:	4091      	lsls	r1, r2
 8000c3a:	000a      	movs	r2, r1
 8000c3c:	43d2      	mvns	r2, r2
 8000c3e:	401a      	ands	r2, r3
 8000c40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	019b      	lsls	r3, r3, #6
 8000c46:	22ff      	movs	r2, #255	; 0xff
 8000c48:	401a      	ands	r2, r3
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	0018      	movs	r0, r3
 8000c50:	2303      	movs	r3, #3
 8000c52:	4003      	ands	r3, r0
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <__NVIC_SetPriority+0xd8>)
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	001c      	movs	r4, r3
 8000c60:	230f      	movs	r3, #15
 8000c62:	4023      	ands	r3, r4
 8000c64:	3b08      	subs	r3, #8
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	3306      	adds	r3, #6
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	18c3      	adds	r3, r0, r3
 8000c70:	3304      	adds	r3, #4
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b003      	add	sp, #12
 8000c7a:	bd90      	pop	{r4, r7, pc}
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	1e5a      	subs	r2, r3, #1
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	045b      	lsls	r3, r3, #17
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d301      	bcc.n	8000c9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e010      	b.n	8000cbe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <SysTick_Config+0x44>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	2103      	movs	r1, #3
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff ff7c 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x44>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x44>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	1c02      	adds	r2, r0, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ff5d 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b004      	add	sp, #16
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ffbf 	bl	8000c84 <SysTick_Config>
 8000d06:	0003      	movs	r3, r0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e147      	b.n	8000fb0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d100      	bne.n	8000d38 <HAL_GPIO_Init+0x28>
 8000d36:	e138      	b.n	8000faa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2203      	movs	r2, #3
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	409a      	lsls	r2, r3
 8000d5e:	0013      	movs	r3, r2
 8000d60:	43da      	mvns	r2, r3
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	409a      	lsls	r2, r3
 8000d72:	0013      	movs	r3, r2
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2203      	movs	r2, #3
 8000db8:	4013      	ands	r3, r2
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d017      	beq.n	8000dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2203      	movs	r2, #3
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d123      	bne.n	8000e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	58d3      	ldr	r3, [r2, r3]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2107      	movs	r1, #7
 8000e26:	400b      	ands	r3, r1
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	6939      	ldr	r1, [r7, #16]
 8000e40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	401a      	ands	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	23c0      	movs	r3, #192	; 0xc0
 8000e7c:	029b      	lsls	r3, r3, #10
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d100      	bne.n	8000e84 <HAL_GPIO_Init+0x174>
 8000e82:	e092      	b.n	8000faa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e84:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	589b      	ldr	r3, [r3, r2]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2203      	movs	r2, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	23a0      	movs	r3, #160	; 0xa0
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0x1ca>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <HAL_GPIO_Init+0x2bc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00d      	beq.n	8000ed6 <HAL_GPIO_Init+0x1c6>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a44      	ldr	r2, [pc, #272]	; (8000fd0 <HAL_GPIO_Init+0x2c0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x1c2>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <HAL_GPIO_Init+0x2c4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x1be>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ece:	2305      	movs	r3, #5
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000eda:	2300      	movs	r3, #0
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	2103      	movs	r1, #3
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	00d2      	lsls	r2, r2, #3
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000eec:	4936      	ldr	r1, [pc, #216]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	035b      	lsls	r3, r3, #13
 8000f12:	4013      	ands	r3, r2
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f1e:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	039b      	lsls	r3, r3, #14
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f50:	2384      	movs	r3, #132	; 0x84
 8000f52:	58d3      	ldr	r3, [r2, r3]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f74:	4914      	ldr	r1, [pc, #80]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f76:	2284      	movs	r2, #132	; 0x84
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f7c:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	58d3      	ldr	r3, [r2, r3]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43da      	mvns	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	4013      	ands	r3, r2
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fa2:	4909      	ldr	r1, [pc, #36]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000fa4:	2280      	movs	r2, #128	; 0x80
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	1e13      	subs	r3, r2, #0
 8000fba:	d000      	beq.n	8000fbe <HAL_GPIO_Init+0x2ae>
 8000fbc:	e6b0      	b.n	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46c0      	nop			; (mov r8, r8)
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	b006      	add	sp, #24
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021800 	.word	0x40021800
 8000fcc:	50000400 	.word	0x50000400
 8000fd0:	50000800 	.word	0x50000800
 8000fd4:	50000c00 	.word	0x50000c00

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	1cbb      	adds	r3, r7, #2
 8000fe6:	1c02      	adds	r2, r0, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	1c7b      	adds	r3, r7, #1
 8000fec:	1c0a      	adds	r2, r1, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff0:	1c7b      	adds	r3, r7, #1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff8:	1cbb      	adds	r3, r7, #2
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001002:	1cbb      	adds	r3, r7, #2
 8001004:	881a      	ldrh	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e082      	b.n	800112c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2241      	movs	r2, #65	; 0x41
 800102a:	5c9b      	ldrb	r3, [r3, r2]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d107      	bne.n	8001042 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff fa91 	bl	8000564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2241      	movs	r2, #65	; 0x41
 8001046:	2124      	movs	r1, #36	; 0x24
 8001048:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	438a      	bics	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4934      	ldr	r1, [pc, #208]	; (8001134 <HAL_I2C_Init+0x120>)
 8001064:	400a      	ands	r2, r1
 8001066:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4931      	ldr	r1, [pc, #196]	; (8001138 <HAL_I2C_Init+0x124>)
 8001074:	400a      	ands	r2, r1
 8001076:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d108      	bne.n	8001092 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689a      	ldr	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	0209      	lsls	r1, r1, #8
 800108c:	430a      	orrs	r2, r1
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e007      	b.n	80010a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2184      	movs	r1, #132	; 0x84
 800109c:	0209      	lsls	r1, r1, #8
 800109e:	430a      	orrs	r2, r1
 80010a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d104      	bne.n	80010b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	491f      	ldr	r1, [pc, #124]	; (800113c <HAL_I2C_Init+0x128>)
 80010c0:	430a      	orrs	r2, r1
 80010c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	491a      	ldr	r1, [pc, #104]	; (8001138 <HAL_I2C_Init+0x124>)
 80010d0:	400a      	ands	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
 80010dc:	431a      	orrs	r2, r3
 80010de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69d9      	ldr	r1, [r3, #28]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a1a      	ldr	r2, [r3, #32]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2241      	movs	r2, #65	; 0x41
 8001118:	2120      	movs	r1, #32
 800111a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2242      	movs	r2, #66	; 0x42
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}
 8001134:	f0ffffff 	.word	0xf0ffffff
 8001138:	ffff7fff 	.word	0xffff7fff
 800113c:	02008000 	.word	0x02008000

08001140 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2241      	movs	r2, #65	; 0x41
 800114e:	5c9b      	ldrb	r3, [r3, r2]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b20      	cmp	r3, #32
 8001154:	d138      	bne.n	80011c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2240      	movs	r2, #64	; 0x40
 800115a:	5c9b      	ldrb	r3, [r3, r2]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001160:	2302      	movs	r3, #2
 8001162:	e032      	b.n	80011ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2240      	movs	r2, #64	; 0x40
 8001168:	2101      	movs	r1, #1
 800116a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2241      	movs	r2, #65	; 0x41
 8001170:	2124      	movs	r1, #36	; 0x24
 8001172:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2101      	movs	r1, #1
 8001180:	438a      	bics	r2, r1
 8001182:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4911      	ldr	r1, [pc, #68]	; (80011d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001190:	400a      	ands	r2, r1
 8001192:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6819      	ldr	r1, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2101      	movs	r1, #1
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2241      	movs	r2, #65	; 0x41
 80011b8:	2120      	movs	r1, #32
 80011ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	2100      	movs	r1, #0
 80011c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011c8:	2302      	movs	r3, #2
  }
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	ffffefff 	.word	0xffffefff

080011d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2241      	movs	r2, #65	; 0x41
 80011e6:	5c9b      	ldrb	r3, [r3, r2]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d139      	bne.n	8001262 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2240      	movs	r2, #64	; 0x40
 80011f2:	5c9b      	ldrb	r3, [r3, r2]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e033      	b.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2240      	movs	r2, #64	; 0x40
 8001200:	2101      	movs	r1, #1
 8001202:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2241      	movs	r2, #65	; 0x41
 8001208:	2124      	movs	r1, #36	; 0x24
 800120a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2101      	movs	r1, #1
 8001218:	438a      	bics	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	430a      	orrs	r2, r1
 800124c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2241      	movs	r2, #65	; 0x41
 8001252:	2120      	movs	r1, #32
 8001254:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2240      	movs	r2, #64	; 0x40
 800125a:	2100      	movs	r1, #0
 800125c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001262:	2302      	movs	r3, #2
  }
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}
 800126c:	fffff0ff 	.word	0xfffff0ff

08001270 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800127e:	4013      	ands	r3, r2
 8001280:	0019      	movs	r1, r3
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	430a      	orrs	r2, r1
 8001288:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d11f      	bne.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	0013      	movs	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	189b      	adds	r3, r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4912      	ldr	r1, [pc, #72]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7fe ff2c 	bl	8000100 <__udivsi3>
 80012a8:	0003      	movs	r3, r0
 80012aa:	3301      	adds	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ae:	e008      	b.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	e001      	b.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e009      	b.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	401a      	ands	r2, r3
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d0ed      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	0018      	movs	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	b004      	add	sp, #16
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	40007000 	.word	0x40007000
 80012e4:	fffff9ff 	.word	0xfffff9ff
 80012e8:	20000000 	.word	0x20000000
 80012ec:	000f4240 	.word	0x000f4240

080012f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	23e0      	movs	r3, #224	; 0xe0
 80012fa:	01db      	lsls	r3, r3, #7
 80012fc:	4013      	ands	r3, r2
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e2f3      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2201      	movs	r2, #1
 8001320:	4013      	ands	r3, r2
 8001322:	d100      	bne.n	8001326 <HAL_RCC_OscConfig+0x1e>
 8001324:	e07c      	b.n	8001420 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001326:	4bc3      	ldr	r3, [pc, #780]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2238      	movs	r2, #56	; 0x38
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001330:	4bc0      	ldr	r3, [pc, #768]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2203      	movs	r2, #3
 8001336:	4013      	ands	r3, r2
 8001338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b10      	cmp	r3, #16
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x3e>
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d002      	beq.n	800134c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d10b      	bne.n	8001364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	4bb9      	ldr	r3, [pc, #740]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	029b      	lsls	r3, r3, #10
 8001354:	4013      	ands	r3, r2
 8001356:	d062      	beq.n	800141e <HAL_RCC_OscConfig+0x116>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d15e      	bne.n	800141e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e2ce      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	025b      	lsls	r3, r3, #9
 800136c:	429a      	cmp	r2, r3
 800136e:	d107      	bne.n	8001380 <HAL_RCC_OscConfig+0x78>
 8001370:	4bb0      	ldr	r3, [pc, #704]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4baf      	ldr	r3, [pc, #700]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	0249      	lsls	r1, r1, #9
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e020      	b.n	80013c2 <HAL_RCC_OscConfig+0xba>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	23a0      	movs	r3, #160	; 0xa0
 8001386:	02db      	lsls	r3, r3, #11
 8001388:	429a      	cmp	r2, r3
 800138a:	d10e      	bne.n	80013aa <HAL_RCC_OscConfig+0xa2>
 800138c:	4ba9      	ldr	r3, [pc, #676]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4ba8      	ldr	r3, [pc, #672]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	02c9      	lsls	r1, r1, #11
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	4ba6      	ldr	r3, [pc, #664]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4ba5      	ldr	r3, [pc, #660]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	0249      	lsls	r1, r1, #9
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e00b      	b.n	80013c2 <HAL_RCC_OscConfig+0xba>
 80013aa:	4ba2      	ldr	r3, [pc, #648]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4ba1      	ldr	r3, [pc, #644]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80013b0:	49a1      	ldr	r1, [pc, #644]	; (8001638 <HAL_RCC_OscConfig+0x330>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	4b9f      	ldr	r3, [pc, #636]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4b9e      	ldr	r3, [pc, #632]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	499f      	ldr	r1, [pc, #636]	; (800163c <HAL_RCC_OscConfig+0x334>)
 80013be:	400a      	ands	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d014      	beq.n	80013f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fbbf 	bl	8000b4c <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d4:	f7ff fbba 	bl	8000b4c <HAL_GetTick>
 80013d8:	0002      	movs	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b64      	cmp	r3, #100	; 0x64
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e28d      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013e6:	4b93      	ldr	r3, [pc, #588]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	4013      	ands	r3, r2
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0xcc>
 80013f2:	e015      	b.n	8001420 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fbaa 	bl	8000b4c <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fe:	f7ff fba5 	bl	8000b4c <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b64      	cmp	r3, #100	; 0x64
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e278      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001410:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	029b      	lsls	r3, r3, #10
 8001418:	4013      	ands	r3, r2
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0xf6>
 800141c:	e000      	b.n	8001420 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2202      	movs	r2, #2
 8001426:	4013      	ands	r3, r2
 8001428:	d100      	bne.n	800142c <HAL_RCC_OscConfig+0x124>
 800142a:	e099      	b.n	8001560 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2238      	movs	r2, #56	; 0x38
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001436:	4b7f      	ldr	r3, [pc, #508]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2203      	movs	r2, #3
 800143c:	4013      	ands	r3, r2
 800143e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b10      	cmp	r3, #16
 8001444:	d102      	bne.n	800144c <HAL_RCC_OscConfig+0x144>
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d002      	beq.n	8001452 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d135      	bne.n	80014be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001452:	4b78      	ldr	r3, [pc, #480]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4013      	ands	r3, r2
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x162>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e24b      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a74      	ldr	r2, [pc, #464]	; (8001640 <HAL_RCC_OscConfig+0x338>)
 8001470:	4013      	ands	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	021a      	lsls	r2, r3, #8
 800147a:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d112      	bne.n	80014ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001486:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a6e      	ldr	r2, [pc, #440]	; (8001644 <HAL_RCC_OscConfig+0x33c>)
 800148c:	4013      	ands	r3, r2
 800148e:	0019      	movs	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	4b67      	ldr	r3, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800149a:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0adb      	lsrs	r3, r3, #11
 80014a0:	2207      	movs	r2, #7
 80014a2:	4013      	ands	r3, r2
 80014a4:	4a68      	ldr	r2, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x340>)
 80014a6:	40da      	lsrs	r2, r3
 80014a8:	4b68      	ldr	r3, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x344>)
 80014aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014ac:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_RCC_OscConfig+0x348>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff faef 	bl	8000a94 <HAL_InitTick>
 80014b6:	1e03      	subs	r3, r0, #0
 80014b8:	d051      	beq.n	800155e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e221      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d030      	beq.n	8001528 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a5e      	ldr	r2, [pc, #376]	; (8001644 <HAL_RCC_OscConfig+0x33c>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	4b57      	ldr	r3, [pc, #348]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014da:	4b56      	ldr	r3, [pc, #344]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b55      	ldr	r3, [pc, #340]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0049      	lsls	r1, r1, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb30 	bl	8000b4c <HAL_GetTick>
 80014ec:	0003      	movs	r3, r0
 80014ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fb2b 	bl	8000b4c <HAL_GetTick>
 80014f6:	0002      	movs	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1fe      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4013      	ands	r3, r2
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a4a      	ldr	r2, [pc, #296]	; (8001640 <HAL_RCC_OscConfig+0x338>)
 8001516:	4013      	ands	r3, r2
 8001518:	0019      	movs	r1, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	021a      	lsls	r2, r3, #8
 8001520:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001522:	430a      	orrs	r2, r1
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	e01b      	b.n	8001560 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800152e:	4949      	ldr	r1, [pc, #292]	; (8001654 <HAL_RCC_OscConfig+0x34c>)
 8001530:	400a      	ands	r2, r1
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fb0a 	bl	8000b4c <HAL_GetTick>
 8001538:	0003      	movs	r3, r0
 800153a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff fb05 	bl	8000b4c <HAL_GetTick>
 8001542:	0002      	movs	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1d8      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4013      	ands	r3, r2
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x236>
 800155c:	e000      	b.n	8001560 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2208      	movs	r2, #8
 8001566:	4013      	ands	r3, r2
 8001568:	d047      	beq.n	80015fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2238      	movs	r2, #56	; 0x38
 8001570:	4013      	ands	r3, r2
 8001572:	2b18      	cmp	r3, #24
 8001574:	d10a      	bne.n	800158c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	2202      	movs	r2, #2
 800157c:	4013      	ands	r3, r2
 800157e:	d03c      	beq.n	80015fa <HAL_RCC_OscConfig+0x2f2>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d138      	bne.n	80015fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e1ba      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d019      	beq.n	80015c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800159a:	2101      	movs	r1, #1
 800159c:	430a      	orrs	r2, r1
 800159e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fad4 	bl	8000b4c <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff facf 	bl	8000b4c <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1a2      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80015be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c0:	2202      	movs	r2, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d0f1      	beq.n	80015aa <HAL_RCC_OscConfig+0x2a2>
 80015c6:	e018      	b.n	80015fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	438a      	bics	r2, r1
 80015d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff faba 	bl	8000b4c <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fab5 	bl	8000b4c <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e188      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f0:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f4:	2202      	movs	r2, #2
 80015f6:	4013      	ands	r3, r2
 80015f8:	d1f1      	bne.n	80015de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2204      	movs	r2, #4
 8001600:	4013      	ands	r3, r2
 8001602:	d100      	bne.n	8001606 <HAL_RCC_OscConfig+0x2fe>
 8001604:	e0c6      	b.n	8001794 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	231f      	movs	r3, #31
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2238      	movs	r2, #56	; 0x38
 8001614:	4013      	ands	r3, r2
 8001616:	2b20      	cmp	r3, #32
 8001618:	d11e      	bne.n	8001658 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x32c>)
 800161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161e:	2202      	movs	r2, #2
 8001620:	4013      	ands	r3, r2
 8001622:	d100      	bne.n	8001626 <HAL_RCC_OscConfig+0x31e>
 8001624:	e0b6      	b.n	8001794 <HAL_RCC_OscConfig+0x48c>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d000      	beq.n	8001630 <HAL_RCC_OscConfig+0x328>
 800162e:	e0b1      	b.n	8001794 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e166      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
 8001634:	40021000 	.word	0x40021000
 8001638:	fffeffff 	.word	0xfffeffff
 800163c:	fffbffff 	.word	0xfffbffff
 8001640:	ffff80ff 	.word	0xffff80ff
 8001644:	ffffc7ff 	.word	0xffffc7ff
 8001648:	00f42400 	.word	0x00f42400
 800164c:	20000000 	.word	0x20000000
 8001650:	20000004 	.word	0x20000004
 8001654:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001658:	4bac      	ldr	r3, [pc, #688]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800165a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	055b      	lsls	r3, r3, #21
 8001660:	4013      	ands	r3, r2
 8001662:	d101      	bne.n	8001668 <HAL_RCC_OscConfig+0x360>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_RCC_OscConfig+0x362>
 8001668:	2300      	movs	r3, #0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d011      	beq.n	8001692 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4ba7      	ldr	r3, [pc, #668]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001672:	4ba6      	ldr	r3, [pc, #664]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	0549      	lsls	r1, r1, #21
 8001678:	430a      	orrs	r2, r1
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
 800167c:	4ba3      	ldr	r3, [pc, #652]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800167e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	055b      	lsls	r3, r3, #21
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800168a:	231f      	movs	r3, #31
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001692:	4b9f      	ldr	r3, [pc, #636]	; (8001910 <HAL_RCC_OscConfig+0x608>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4013      	ands	r3, r2
 800169c:	d11a      	bne.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800169e:	4b9c      	ldr	r3, [pc, #624]	; (8001910 <HAL_RCC_OscConfig+0x608>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	4b9b      	ldr	r3, [pc, #620]	; (8001910 <HAL_RCC_OscConfig+0x608>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0049      	lsls	r1, r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa4e 	bl	8000b4c <HAL_GetTick>
 80016b0:	0003      	movs	r3, r0
 80016b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b6:	f7ff fa49 	bl	8000b4c <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e11c      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	4b91      	ldr	r3, [pc, #580]	; (8001910 <HAL_RCC_OscConfig+0x608>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d106      	bne.n	80016ea <HAL_RCC_OscConfig+0x3e2>
 80016dc:	4b8b      	ldr	r3, [pc, #556]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80016de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e0:	4b8a      	ldr	r3, [pc, #552]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0x41c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x404>
 80016f2:	4b86      	ldr	r3, [pc, #536]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80016f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f6:	4b85      	ldr	r3, [pc, #532]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80016f8:	2104      	movs	r1, #4
 80016fa:	430a      	orrs	r2, r1
 80016fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80016fe:	4b83      	ldr	r3, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001702:	4b82      	ldr	r3, [pc, #520]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001704:	2101      	movs	r1, #1
 8001706:	430a      	orrs	r2, r1
 8001708:	65da      	str	r2, [r3, #92]	; 0x5c
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0x41c>
 800170c:	4b7f      	ldr	r3, [pc, #508]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800170e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001710:	4b7e      	ldr	r3, [pc, #504]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001712:	2101      	movs	r1, #1
 8001714:	438a      	bics	r2, r1
 8001716:	65da      	str	r2, [r3, #92]	; 0x5c
 8001718:	4b7c      	ldr	r3, [pc, #496]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800171a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800171c:	4b7b      	ldr	r3, [pc, #492]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800171e:	2104      	movs	r1, #4
 8001720:	438a      	bics	r2, r1
 8001722:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d014      	beq.n	8001756 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fa0e 	bl	8000b4c <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001734:	e009      	b.n	800174a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fa09 	bl	8000b4c <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a74      	ldr	r2, [pc, #464]	; (8001914 <HAL_RCC_OscConfig+0x60c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0db      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174a:	4b70      	ldr	r3, [pc, #448]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	2202      	movs	r2, #2
 8001750:	4013      	ands	r3, r2
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x42e>
 8001754:	e013      	b.n	800177e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff f9f9 	bl	8000b4c <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800175e:	e009      	b.n	8001774 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff f9f4 	bl	8000b4c <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	4a6a      	ldr	r2, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x60c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e0c6      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001774:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800177e:	231f      	movs	r3, #31
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001788:	4b60      	ldr	r3, [pc, #384]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800178a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800178c:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800178e:	4962      	ldr	r1, [pc, #392]	; (8001918 <HAL_RCC_OscConfig+0x610>)
 8001790:	400a      	ands	r2, r1
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d100      	bne.n	800179e <HAL_RCC_OscConfig+0x496>
 800179c:	e0b0      	b.n	8001900 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179e:	4b5b      	ldr	r3, [pc, #364]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2238      	movs	r2, #56	; 0x38
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d100      	bne.n	80017ac <HAL_RCC_OscConfig+0x4a4>
 80017aa:	e078      	b.n	800189e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d153      	bne.n	800185c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b4:	4b55      	ldr	r3, [pc, #340]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b54      	ldr	r3, [pc, #336]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80017ba:	4958      	ldr	r1, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x614>)
 80017bc:	400a      	ands	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f9c4 	bl	8000b4c <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff f9bf 	bl	8000b4c <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e092      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	4b4b      	ldr	r3, [pc, #300]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	049b      	lsls	r3, r3, #18
 80017e4:	4013      	ands	r3, r2
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e8:	4b48      	ldr	r3, [pc, #288]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_RCC_OscConfig+0x618>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	431a      	orrs	r2, r3
 8001810:	4b3e      	ldr	r3, [pc, #248]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001812:	430a      	orrs	r2, r1
 8001814:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b3c      	ldr	r3, [pc, #240]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0449      	lsls	r1, r1, #17
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800182a:	2180      	movs	r1, #128	; 0x80
 800182c:	0549      	lsls	r1, r1, #21
 800182e:	430a      	orrs	r2, r1
 8001830:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff f98b 	bl	8000b4c <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff f986 	bl	8000b4c <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e059      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	049b      	lsls	r3, r3, #18
 8001856:	4013      	ands	r3, r2
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x534>
 800185a:	e051      	b.n	8001900 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_RCC_OscConfig+0x604>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001862:	492e      	ldr	r1, [pc, #184]	; (800191c <HAL_RCC_OscConfig+0x614>)
 8001864:	400a      	ands	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff f970 	bl	8000b4c <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff f96b 	bl	8000b4c <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e03e      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	049b      	lsls	r3, r3, #18
 800188c:	4013      	ands	r3, r2
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x604>)
 8001896:	4923      	ldr	r1, [pc, #140]	; (8001924 <HAL_RCC_OscConfig+0x61c>)
 8001898:	400a      	ands	r2, r1
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	e030      	b.n	8001900 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e02b      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <HAL_RCC_OscConfig+0x604>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2203      	movs	r2, #3
 80018b4:	401a      	ands	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d11e      	bne.n	80018fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2270      	movs	r2, #112	; 0x70
 80018c2:	401a      	ands	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d117      	bne.n	80018fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	23fe      	movs	r3, #254	; 0xfe
 80018d0:	01db      	lsls	r3, r3, #7
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d10e      	bne.n	80018fc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	23f8      	movs	r3, #248	; 0xf8
 80018e2:	039b      	lsls	r3, r3, #14
 80018e4:	401a      	ands	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	0f5b      	lsrs	r3, r3, #29
 80018f2:	075a      	lsls	r2, r3, #29
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	0018      	movs	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	b008      	add	sp, #32
 8001908:	bd80      	pop	{r7, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	40021000 	.word	0x40021000
 8001910:	40007000 	.word	0x40007000
 8001914:	00001388 	.word	0x00001388
 8001918:	efffffff 	.word	0xefffffff
 800191c:	feffffff 	.word	0xfeffffff
 8001920:	1fc1808c 	.word	0x1fc1808c
 8001924:	effefffc 	.word	0xeffefffc

08001928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0e9      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800193c:	4b76      	ldr	r3, [pc, #472]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2207      	movs	r2, #7
 8001942:	4013      	ands	r3, r2
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d91e      	bls.n	8001988 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2207      	movs	r2, #7
 8001950:	4393      	bics	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800195c:	f7ff f8f6 	bl	8000b4c <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001964:	e009      	b.n	800197a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001966:	f7ff f8f1 	bl	8000b4c <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	4a6a      	ldr	r2, [pc, #424]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e0ca      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800197a:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2207      	movs	r2, #7
 8001980:	4013      	ands	r3, r2
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d1ee      	bne.n	8001966 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2202      	movs	r2, #2
 800198e:	4013      	ands	r3, r2
 8001990:	d015      	beq.n	80019be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2204      	movs	r2, #4
 8001998:	4013      	ands	r3, r2
 800199a:	d006      	beq.n	80019aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800199c:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	21e0      	movs	r1, #224	; 0xe0
 80019a4:	01c9      	lsls	r1, r1, #7
 80019a6:	430a      	orrs	r2, r1
 80019a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019aa:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4a5d      	ldr	r2, [pc, #372]	; (8001b24 <HAL_RCC_ClockConfig+0x1fc>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4b59      	ldr	r3, [pc, #356]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	d057      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d0:	4b53      	ldr	r3, [pc, #332]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	029b      	lsls	r3, r3, #10
 80019d8:	4013      	ands	r3, r2
 80019da:	d12b      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e097      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e8:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	049b      	lsls	r3, r3, #18
 80019f0:	4013      	ands	r3, r2
 80019f2:	d11f      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e08b      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d113      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e07f      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d108      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e074      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a26:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e06d      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2207      	movs	r2, #7
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a48:	f7ff f880 	bl	8000b4c <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a50:	e009      	b.n	8001a66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a52:	f7ff f87b 	bl	8000b4c <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	4a2f      	ldr	r2, [pc, #188]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e054      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2238      	movs	r2, #56	; 0x38
 8001a6c:	401a      	ands	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d1ec      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	4013      	ands	r3, r2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d21e      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a86:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2207      	movs	r2, #7
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f858 	bl	8000b4c <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa0:	e009      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa2:	f7ff f853 	bl	8000b4c <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_RCC_ClockConfig+0x1f4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e02c      	b.n	8001b10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2204      	movs	r2, #4
 8001aca:	4013      	ands	r3, r2
 8001acc:	d009      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_RCC_ClockConfig+0x200>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ae2:	f000 f829 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001ae6:	0001      	movs	r1, r0
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	220f      	movs	r2, #15
 8001af0:	401a      	ands	r2, r3
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_RCC_ClockConfig+0x204>)
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	58d3      	ldr	r3, [r2, r3]
 8001af8:	221f      	movs	r2, #31
 8001afa:	4013      	ands	r3, r2
 8001afc:	000a      	movs	r2, r1
 8001afe:	40da      	lsrs	r2, r3
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x208>)
 8001b02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x20c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7fe ffc3 	bl	8000a94 <HAL_InitTick>
 8001b0e:	0003      	movs	r3, r0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b004      	add	sp, #16
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40022000 	.word	0x40022000
 8001b1c:	00001388 	.word	0x00001388
 8001b20:	40021000 	.word	0x40021000
 8001b24:	fffff0ff 	.word	0xfffff0ff
 8001b28:	ffff8fff 	.word	0xffff8fff
 8001b2c:	080029f0 	.word	0x080029f0
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2238      	movs	r2, #56	; 0x38
 8001b44:	4013      	ands	r3, r2
 8001b46:	d10f      	bne.n	8001b68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0adb      	lsrs	r3, r3, #11
 8001b4e:	2207      	movs	r2, #7
 8001b50:	4013      	ands	r3, r2
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	0013      	movs	r3, r2
 8001b58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b5a:	6839      	ldr	r1, [r7, #0]
 8001b5c:	4835      	ldr	r0, [pc, #212]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b5e:	f7fe facf 	bl	8000100 <__udivsi3>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e05d      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b68:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2238      	movs	r2, #56	; 0x38
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e054      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2238      	movs	r2, #56	; 0x38
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d138      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	2207      	movs	r2, #7
 8001b98:	4013      	ands	r3, r2
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	4824      	ldr	r0, [pc, #144]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ba8:	f7fe faaa 	bl	8000100 <__udivsi3>
 8001bac:	0003      	movs	r3, r0
 8001bae:	0019      	movs	r1, r3
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	227f      	movs	r2, #127	; 0x7f
 8001bb8:	4013      	ands	r3, r2
 8001bba:	434b      	muls	r3, r1
 8001bbc:	617b      	str	r3, [r7, #20]
        break;
 8001bbe:	e00d      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	481c      	ldr	r0, [pc, #112]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bc4:	f7fe fa9c 	bl	8000100 <__udivsi3>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	227f      	movs	r2, #127	; 0x7f
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	434b      	muls	r3, r1
 8001bd8:	617b      	str	r3, [r7, #20]
        break;
 8001bda:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	0f5b      	lsrs	r3, r3, #29
 8001be2:	2207      	movs	r2, #7
 8001be4:	4013      	ands	r3, r2
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	6978      	ldr	r0, [r7, #20]
 8001bee:	f7fe fa87 	bl	8000100 <__udivsi3>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	e015      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2238      	movs	r2, #56	; 0x38
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d103      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2238      	movs	r2, #56	; 0x38
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b18      	cmp	r3, #24
 8001c16:	d103      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c18:	23fa      	movs	r3, #250	; 0xfa
 8001c1a:	01db      	lsls	r3, r3, #7
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	e001      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c24:	693b      	ldr	r3, [r7, #16]
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b006      	add	sp, #24
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	40021000 	.word	0x40021000
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b02      	ldr	r3, [pc, #8]	; (8001c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	20000000 	.word	0x20000000

08001c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c54:	f7ff fff2 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c58:	0004      	movs	r4, r0
 8001c5a:	f7ff fb49 	bl	80012f0 <LL_RCC_GetAPB1Prescaler>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	0b1a      	lsrs	r2, r3, #12
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	58d3      	ldr	r3, [r2, r3]
 8001c68:	221f      	movs	r2, #31
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	40dc      	lsrs	r4, r3
 8001c6e:	0023      	movs	r3, r4
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bdb0      	pop	{r4, r5, r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	08002a30 	.word	0x08002a30

08001c7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c84:	2313      	movs	r3, #19
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c8c:	2312      	movs	r3, #18
 8001c8e:	18fb      	adds	r3, r7, r3
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	029b      	lsls	r3, r3, #10
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d100      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ca0:	e0a3      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2011      	movs	r0, #17
 8001ca4:	183b      	adds	r3, r7, r0
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001caa:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	055b      	lsls	r3, r3, #21
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d110      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b7c      	ldr	r3, [pc, #496]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cba:	4b7b      	ldr	r3, [pc, #492]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	0549      	lsls	r1, r1, #21
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cc4:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	055b      	lsls	r3, r3, #21
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd2:	183b      	adds	r3, r7, r0
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd8:	4b74      	ldr	r3, [pc, #464]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b73      	ldr	r3, [pc, #460]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	0049      	lsls	r1, r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ce6:	f7fe ff31 	bl	8000b4c <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cee:	e00b      	b.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf0:	f7fe ff2c 	bl	8000b4c <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d904      	bls.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001cfe:	2313      	movs	r3, #19
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	2203      	movs	r2, #3
 8001d04:	701a      	strb	r2, [r3, #0]
        break;
 8001d06:	e005      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d08:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4013      	ands	r3, r2
 8001d12:	d0ed      	beq.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d14:	2313      	movs	r3, #19
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d154      	bne.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d1e:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4013      	ands	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d019      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d014      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d44:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d48:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d4a:	2180      	movs	r1, #128	; 0x80
 8001d4c:	0249      	lsls	r1, r1, #9
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d52:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d56:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d58:	4956      	ldr	r1, [pc, #344]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d5e:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d016      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe feee 	bl	8000b4c <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d74:	e00c      	b.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7fe fee9 	bl	8000b4c <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d904      	bls.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d86:	2313      	movs	r3, #19
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	701a      	strb	r2, [r3, #0]
            break;
 8001d8e:	e004      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d90:	4b45      	ldr	r3, [pc, #276]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d0ed      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d9a:	2313      	movs	r3, #19
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10a      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da4:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	4a41      	ldr	r2, [pc, #260]	; (8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695a      	ldr	r2, [r3, #20]
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001db8:	e00c      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dba:	2312      	movs	r3, #18
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2213      	movs	r2, #19
 8001dc0:	18ba      	adds	r2, r7, r2
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	701a      	strb	r2, [r3, #0]
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2213      	movs	r2, #19
 8001dce:	18ba      	adds	r2, r7, r2
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dd4:	2311      	movs	r3, #17
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d105      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dde:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de2:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001de4:	4935      	ldr	r1, [pc, #212]	; (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d009      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	2203      	movs	r2, #3
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e04:	430a      	orrs	r2, r1
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	4a2a      	ldr	r2, [pc, #168]	; (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	01db      	lsls	r3, r3, #7
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d015      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	0899      	lsrs	r1, r3, #2
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e40:	430a      	orrs	r2, r1
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	05db      	lsls	r3, r3, #23
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	0249      	lsls	r1, r1, #9
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4013      	ands	r3, r2
 8001e68:	d016      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	0019      	movs	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	01db      	lsls	r3, r3, #7
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d106      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	0249      	lsls	r1, r1, #9
 8001e94:	430a      	orrs	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001e98:	2312      	movs	r3, #18
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b006      	add	sp, #24
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	fffffcff 	.word	0xfffffcff
 8001eb4:	fffeffff 	.word	0xfffeffff
 8001eb8:	00001388 	.word	0x00001388
 8001ebc:	efffffff 	.word	0xefffffff
 8001ec0:	ffffcfff 	.word	0xffffcfff
 8001ec4:	ffff3fff 	.word	0xffff3fff

08001ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0a8      	b.n	800202c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2382      	movs	r3, #130	; 0x82
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d009      	beq.n	8001f02 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	61da      	str	r2, [r3, #28]
 8001ef4:	e005      	b.n	8001f02 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	225d      	movs	r2, #93	; 0x5d
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	225c      	movs	r2, #92	; 0x5c
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7fe fc34 	bl	800078c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	225d      	movs	r2, #93	; 0x5d
 8001f28:	2102      	movs	r1, #2
 8001f2a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2140      	movs	r1, #64	; 0x40
 8001f38:	438a      	bics	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	23e0      	movs	r3, #224	; 0xe0
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d902      	bls.n	8001f4e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	e002      	b.n	8001f54 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	015b      	lsls	r3, r3, #5
 8001f52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	23f0      	movs	r3, #240	; 0xf0
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d008      	beq.n	8001f72 <HAL_SPI_Init+0xaa>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	23e0      	movs	r3, #224	; 0xe0
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d002      	beq.n	8001f72 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	2382      	movs	r3, #130	; 0x82
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6899      	ldr	r1, [r3, #8]
 8001f80:	2384      	movs	r3, #132	; 0x84
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	400b      	ands	r3, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	400b      	ands	r3, r1
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	2101      	movs	r1, #1
 8001f98:	400b      	ands	r3, r1
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6999      	ldr	r1, [r3, #24]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	400b      	ands	r3, r1
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2138      	movs	r1, #56	; 0x38
 8001fae:	400b      	ands	r3, r1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	400b      	ands	r3, r1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	0011      	movs	r1, r2
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	401a      	ands	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	2110      	movs	r1, #16
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	2108      	movs	r1, #8
 8001fea:	400b      	ands	r3, r1
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	23f0      	movs	r3, #240	; 0xf0
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	400b      	ands	r3, r1
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	015b      	lsls	r3, r3, #5
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69da      	ldr	r2, [r3, #28]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4907      	ldr	r1, [pc, #28]	; (8002034 <HAL_SPI_Init+0x16c>)
 8002018:	400a      	ands	r2, r1
 800201a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	225d      	movs	r2, #93	; 0x5d
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}
 8002034:	fffff7ff 	.word	0xfffff7ff

08002038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e046      	b.n	80020d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2288      	movs	r2, #136	; 0x88
 800204e:	589b      	ldr	r3, [r3, r2]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d107      	bne.n	8002064 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2284      	movs	r2, #132	; 0x84
 8002058:	2100      	movs	r1, #0
 800205a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f7fe fc6c 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2288      	movs	r2, #136	; 0x88
 8002068:	2124      	movs	r1, #36	; 0x24
 800206a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2101      	movs	r1, #1
 8002078:	438a      	bics	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 f830 	bl	80020e4 <UART_SetConfig>
 8002084:	0003      	movs	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e024      	b.n	80020d8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	0018      	movs	r0, r3
 800209a:	f000 f98d 	bl	80023b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	490d      	ldr	r1, [pc, #52]	; (80020e0 <HAL_UART_Init+0xa8>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	212a      	movs	r1, #42	; 0x2a
 80020ba:	438a      	bics	r2, r1
 80020bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f000 fa25 	bl	8002520 <UART_CheckIdleState>
 80020d6:	0003      	movs	r3, r0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	ffffb7ff 	.word	0xffffb7ff

080020e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020ec:	231a      	movs	r3, #26
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	4313      	orrs	r3, r2
 800210a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4aa1      	ldr	r2, [pc, #644]	; (8002398 <UART_SetConfig+0x2b4>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a9c      	ldr	r2, [pc, #624]	; (800239c <UART_SetConfig+0x2b8>)
 800212a:	4013      	ands	r3, r2
 800212c:	0019      	movs	r1, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	4313      	orrs	r3, r2
 8002148:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a93      	ldr	r2, [pc, #588]	; (80023a0 <UART_SetConfig+0x2bc>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	430a      	orrs	r2, r1
 800215e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	220f      	movs	r2, #15
 8002168:	4393      	bics	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a89      	ldr	r2, [pc, #548]	; (80023a4 <UART_SetConfig+0x2c0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d127      	bne.n	80021d2 <UART_SetConfig+0xee>
 8002182:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <UART_SetConfig+0x2c4>)
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	2203      	movs	r2, #3
 8002188:	4013      	ands	r3, r2
 800218a:	2b03      	cmp	r3, #3
 800218c:	d017      	beq.n	80021be <UART_SetConfig+0xda>
 800218e:	d81b      	bhi.n	80021c8 <UART_SetConfig+0xe4>
 8002190:	2b02      	cmp	r3, #2
 8002192:	d00a      	beq.n	80021aa <UART_SetConfig+0xc6>
 8002194:	d818      	bhi.n	80021c8 <UART_SetConfig+0xe4>
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <UART_SetConfig+0xbc>
 800219a:	2b01      	cmp	r3, #1
 800219c:	d00a      	beq.n	80021b4 <UART_SetConfig+0xd0>
 800219e:	e013      	b.n	80021c8 <UART_SetConfig+0xe4>
 80021a0:	231b      	movs	r3, #27
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
 80021a8:	e021      	b.n	80021ee <UART_SetConfig+0x10a>
 80021aa:	231b      	movs	r3, #27
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2202      	movs	r2, #2
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e01c      	b.n	80021ee <UART_SetConfig+0x10a>
 80021b4:	231b      	movs	r3, #27
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2204      	movs	r2, #4
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	e017      	b.n	80021ee <UART_SetConfig+0x10a>
 80021be:	231b      	movs	r3, #27
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	2208      	movs	r2, #8
 80021c4:	701a      	strb	r2, [r3, #0]
 80021c6:	e012      	b.n	80021ee <UART_SetConfig+0x10a>
 80021c8:	231b      	movs	r3, #27
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	2210      	movs	r2, #16
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e00d      	b.n	80021ee <UART_SetConfig+0x10a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a75      	ldr	r2, [pc, #468]	; (80023ac <UART_SetConfig+0x2c8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d104      	bne.n	80021e6 <UART_SetConfig+0x102>
 80021dc:	231b      	movs	r3, #27
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e003      	b.n	80021ee <UART_SetConfig+0x10a>
 80021e6:	231b      	movs	r3, #27
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2210      	movs	r2, #16
 80021ec:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d000      	beq.n	80021fc <UART_SetConfig+0x118>
 80021fa:	e065      	b.n	80022c8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 80021fc:	231b      	movs	r3, #27
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b08      	cmp	r3, #8
 8002204:	d015      	beq.n	8002232 <UART_SetConfig+0x14e>
 8002206:	dc18      	bgt.n	800223a <UART_SetConfig+0x156>
 8002208:	2b04      	cmp	r3, #4
 800220a:	d00d      	beq.n	8002228 <UART_SetConfig+0x144>
 800220c:	dc15      	bgt.n	800223a <UART_SetConfig+0x156>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <UART_SetConfig+0x134>
 8002212:	2b02      	cmp	r3, #2
 8002214:	d005      	beq.n	8002222 <UART_SetConfig+0x13e>
 8002216:	e010      	b.n	800223a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002218:	f7ff fd1a 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 800221c:	0003      	movs	r3, r0
 800221e:	617b      	str	r3, [r7, #20]
        break;
 8002220:	e012      	b.n	8002248 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <UART_SetConfig+0x2cc>)
 8002224:	617b      	str	r3, [r7, #20]
        break;
 8002226:	e00f      	b.n	8002248 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002228:	f7ff fc86 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 800222c:	0003      	movs	r3, r0
 800222e:	617b      	str	r3, [r7, #20]
        break;
 8002230:	e00a      	b.n	8002248 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	617b      	str	r3, [r7, #20]
        break;
 8002238:	e006      	b.n	8002248 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800223e:	231a      	movs	r3, #26
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
        break;
 8002246:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d100      	bne.n	8002250 <UART_SetConfig+0x16c>
 800224e:	e08d      	b.n	800236c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002254:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <UART_SetConfig+0x2d0>)
 8002256:	0052      	lsls	r2, r2, #1
 8002258:	5ad3      	ldrh	r3, [r2, r3]
 800225a:	0019      	movs	r1, r3
 800225c:	6978      	ldr	r0, [r7, #20]
 800225e:	f7fd ff4f 	bl	8000100 <__udivsi3>
 8002262:	0003      	movs	r3, r0
 8002264:	005a      	lsls	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	18d2      	adds	r2, r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	0019      	movs	r1, r3
 8002274:	0010      	movs	r0, r2
 8002276:	f7fd ff43 	bl	8000100 <__udivsi3>
 800227a:	0003      	movs	r3, r0
 800227c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b0f      	cmp	r3, #15
 8002282:	d91c      	bls.n	80022be <UART_SetConfig+0x1da>
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	025b      	lsls	r3, r3, #9
 800228a:	429a      	cmp	r2, r3
 800228c:	d217      	bcs.n	80022be <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	b29a      	uxth	r2, r3
 8002292:	200e      	movs	r0, #14
 8002294:	183b      	adds	r3, r7, r0
 8002296:	210f      	movs	r1, #15
 8002298:	438a      	bics	r2, r1
 800229a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	2207      	movs	r2, #7
 80022a4:	4013      	ands	r3, r2
 80022a6:	b299      	uxth	r1, r3
 80022a8:	183b      	adds	r3, r7, r0
 80022aa:	183a      	adds	r2, r7, r0
 80022ac:	8812      	ldrh	r2, [r2, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	183a      	adds	r2, r7, r0
 80022b8:	8812      	ldrh	r2, [r2, #0]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	e056      	b.n	800236c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80022be:	231a      	movs	r3, #26
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e051      	b.n	800236c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022c8:	231b      	movs	r3, #27
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d015      	beq.n	80022fe <UART_SetConfig+0x21a>
 80022d2:	dc18      	bgt.n	8002306 <UART_SetConfig+0x222>
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d00d      	beq.n	80022f4 <UART_SetConfig+0x210>
 80022d8:	dc15      	bgt.n	8002306 <UART_SetConfig+0x222>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <UART_SetConfig+0x200>
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d005      	beq.n	80022ee <UART_SetConfig+0x20a>
 80022e2:	e010      	b.n	8002306 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022e4:	f7ff fcb4 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
 80022e8:	0003      	movs	r3, r0
 80022ea:	617b      	str	r3, [r7, #20]
        break;
 80022ec:	e012      	b.n	8002314 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <UART_SetConfig+0x2cc>)
 80022f0:	617b      	str	r3, [r7, #20]
        break;
 80022f2:	e00f      	b.n	8002314 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022f4:	f7ff fc20 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 80022f8:	0003      	movs	r3, r0
 80022fa:	617b      	str	r3, [r7, #20]
        break;
 80022fc:	e00a      	b.n	8002314 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	021b      	lsls	r3, r3, #8
 8002302:	617b      	str	r3, [r7, #20]
        break;
 8002304:	e006      	b.n	8002314 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800230a:	231a      	movs	r3, #26
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
        break;
 8002312:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d028      	beq.n	800236c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231e:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <UART_SetConfig+0x2d0>)
 8002320:	0052      	lsls	r2, r2, #1
 8002322:	5ad3      	ldrh	r3, [r2, r3]
 8002324:	0019      	movs	r1, r3
 8002326:	6978      	ldr	r0, [r7, #20]
 8002328:	f7fd feea 	bl	8000100 <__udivsi3>
 800232c:	0003      	movs	r3, r0
 800232e:	001a      	movs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	18d2      	adds	r2, r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	0019      	movs	r1, r3
 800233e:	0010      	movs	r0, r2
 8002340:	f7fd fede 	bl	8000100 <__udivsi3>
 8002344:	0003      	movs	r3, r0
 8002346:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b0f      	cmp	r3, #15
 800234c:	d90a      	bls.n	8002364 <UART_SetConfig+0x280>
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	025b      	lsls	r3, r3, #9
 8002354:	429a      	cmp	r2, r3
 8002356:	d205      	bcs.n	8002364 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	b29a      	uxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	e003      	b.n	800236c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002364:	231a      	movs	r3, #26
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	226a      	movs	r2, #106	; 0x6a
 8002370:	2101      	movs	r1, #1
 8002372:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2268      	movs	r2, #104	; 0x68
 8002378:	2101      	movs	r1, #1
 800237a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002388:	231a      	movs	r3, #26
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	781b      	ldrb	r3, [r3, #0]
}
 800238e:	0018      	movs	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	b008      	add	sp, #32
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	cfff69f3 	.word	0xcfff69f3
 800239c:	ffffcfff 	.word	0xffffcfff
 80023a0:	11fff4ff 	.word	0x11fff4ff
 80023a4:	40013800 	.word	0x40013800
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40004400 	.word	0x40004400
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	08002a50 	.word	0x08002a50

080023b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a4a      	ldr	r2, [pc, #296]	; (80024fc <UART_AdvFeatureConfig+0x144>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	2202      	movs	r2, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d00b      	beq.n	8002404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	4a43      	ldr	r2, [pc, #268]	; (8002500 <UART_AdvFeatureConfig+0x148>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	0019      	movs	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002408:	2204      	movs	r2, #4
 800240a:	4013      	ands	r3, r2
 800240c:	d00b      	beq.n	8002426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a3b      	ldr	r2, [pc, #236]	; (8002504 <UART_AdvFeatureConfig+0x14c>)
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	2208      	movs	r2, #8
 800242c:	4013      	ands	r3, r2
 800242e:	d00b      	beq.n	8002448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4a34      	ldr	r2, [pc, #208]	; (8002508 <UART_AdvFeatureConfig+0x150>)
 8002438:	4013      	ands	r3, r2
 800243a:	0019      	movs	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	2210      	movs	r2, #16
 800244e:	4013      	ands	r3, r2
 8002450:	d00b      	beq.n	800246a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a2c      	ldr	r2, [pc, #176]	; (800250c <UART_AdvFeatureConfig+0x154>)
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	2220      	movs	r2, #32
 8002470:	4013      	ands	r3, r2
 8002472:	d00b      	beq.n	800248c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4a25      	ldr	r2, [pc, #148]	; (8002510 <UART_AdvFeatureConfig+0x158>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	2240      	movs	r2, #64	; 0x40
 8002492:	4013      	ands	r3, r2
 8002494:	d01d      	beq.n	80024d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <UART_AdvFeatureConfig+0x15c>)
 800249e:	4013      	ands	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	035b      	lsls	r3, r3, #13
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d10b      	bne.n	80024d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4a15      	ldr	r2, [pc, #84]	; (8002518 <UART_AdvFeatureConfig+0x160>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	4013      	ands	r3, r2
 80024da:	d00b      	beq.n	80024f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a0e      	ldr	r2, [pc, #56]	; (800251c <UART_AdvFeatureConfig+0x164>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
  }
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	fffdffff 	.word	0xfffdffff
 8002500:	fffeffff 	.word	0xfffeffff
 8002504:	fffbffff 	.word	0xfffbffff
 8002508:	ffff7fff 	.word	0xffff7fff
 800250c:	ffffefff 	.word	0xffffefff
 8002510:	ffffdfff 	.word	0xffffdfff
 8002514:	ffefffff 	.word	0xffefffff
 8002518:	ff9fffff 	.word	0xff9fffff
 800251c:	fff7ffff 	.word	0xfff7ffff

08002520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af02      	add	r7, sp, #8
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2290      	movs	r2, #144	; 0x90
 800252c:	2100      	movs	r1, #0
 800252e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002530:	f7fe fb0c 	bl	8000b4c <HAL_GetTick>
 8002534:	0003      	movs	r3, r0
 8002536:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2208      	movs	r2, #8
 8002540:	4013      	ands	r3, r2
 8002542:	2b08      	cmp	r3, #8
 8002544:	d10c      	bne.n	8002560 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2280      	movs	r2, #128	; 0x80
 800254a:	0391      	lsls	r1, r2, #14
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <UART_CheckIdleState+0x98>)
 8002550:	9200      	str	r2, [sp, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	f000 f832 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8002558:	1e03      	subs	r3, r0, #0
 800255a:	d001      	beq.n	8002560 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e026      	b.n	80025ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2204      	movs	r2, #4
 8002568:	4013      	ands	r3, r2
 800256a:	2b04      	cmp	r3, #4
 800256c:	d10c      	bne.n	8002588 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	03d1      	lsls	r1, r2, #15
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <UART_CheckIdleState+0x98>)
 8002578:	9200      	str	r2, [sp, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	f000 f81e 	bl	80025bc <UART_WaitOnFlagUntilTimeout>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d001      	beq.n	8002588 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e012      	b.n	80025ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2288      	movs	r2, #136	; 0x88
 800258c:	2120      	movs	r1, #32
 800258e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	228c      	movs	r2, #140	; 0x8c
 8002594:	2120      	movs	r1, #32
 8002596:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2284      	movs	r2, #132	; 0x84
 80025a8:	2100      	movs	r1, #0
 80025aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b004      	add	sp, #16
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	01ffffff 	.word	0x01ffffff

080025bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b094      	sub	sp, #80	; 0x50
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	1dfb      	adds	r3, r7, #7
 80025ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025cc:	e0a7      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d0:	3301      	adds	r3, #1
 80025d2:	d100      	bne.n	80025d6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80025d4:	e0a3      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d6:	f7fe fab9 	bl	8000b4c <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d302      	bcc.n	80025ec <UART_WaitOnFlagUntilTimeout+0x30>
 80025e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d13f      	bne.n	800266c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ec:	f3ef 8310 	mrs	r3, PRIMASK
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80025f4:	647b      	str	r3, [r7, #68]	; 0x44
 80025f6:	2301      	movs	r3, #1
 80025f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	494e      	ldr	r1, [pc, #312]	; (8002748 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800260e:	400a      	ands	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002614:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	f383 8810 	msr	PRIMASK, r3
}
 800261c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8310 	mrs	r3, PRIMASK
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002626:	643b      	str	r3, [r7, #64]	; 0x40
 8002628:	2301      	movs	r3, #1
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	f383 8810 	msr	PRIMASK, r3
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	438a      	bics	r2, r1
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2288      	movs	r2, #136	; 0x88
 8002654:	2120      	movs	r1, #32
 8002656:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	228c      	movs	r2, #140	; 0x8c
 800265c:	2120      	movs	r1, #32
 800265e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2284      	movs	r2, #132	; 0x84
 8002664:	2100      	movs	r1, #0
 8002666:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e069      	b.n	8002740 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2204      	movs	r2, #4
 8002674:	4013      	ands	r3, r2
 8002676:	d052      	beq.n	800271e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	401a      	ands	r2, r3
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	429a      	cmp	r2, r3
 800268a:	d148      	bne.n	800271e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002696:	f3ef 8310 	mrs	r3, PRIMASK
 800269a:	613b      	str	r3, [r7, #16]
  return(result);
 800269c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800269e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026a0:	2301      	movs	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f383 8810 	msr	PRIMASK, r3
}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4924      	ldr	r1, [pc, #144]	; (8002748 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80026b8:	400a      	ands	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	f383 8810 	msr	PRIMASK, r3
}
 80026c6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c8:	f3ef 8310 	mrs	r3, PRIMASK
 80026cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80026ce:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80026d2:	2301      	movs	r3, #1
 80026d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	f383 8810 	msr	PRIMASK, r3
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	438a      	bics	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	f383 8810 	msr	PRIMASK, r3
}
 80026f8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2288      	movs	r2, #136	; 0x88
 80026fe:	2120      	movs	r1, #32
 8002700:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	228c      	movs	r2, #140	; 0x8c
 8002706:	2120      	movs	r1, #32
 8002708:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2290      	movs	r2, #144	; 0x90
 800270e:	2120      	movs	r1, #32
 8002710:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2284      	movs	r2, #132	; 0x84
 8002716:	2100      	movs	r1, #0
 8002718:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e010      	b.n	8002740 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	425a      	negs	r2, r3
 800272e:	4153      	adcs	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	001a      	movs	r2, r3
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d100      	bne.n	800273e <UART_WaitOnFlagUntilTimeout+0x182>
 800273c:	e747      	b.n	80025ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b014      	add	sp, #80	; 0x50
 8002746:	bd80      	pop	{r7, pc}
 8002748:	fffffe5f 	.word	0xfffffe5f

0800274c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2284      	movs	r2, #132	; 0x84
 8002758:	5c9b      	ldrb	r3, [r3, r2]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_UARTEx_DisableFifoMode+0x16>
 800275e:	2302      	movs	r3, #2
 8002760:	e027      	b.n	80027b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2284      	movs	r2, #132	; 0x84
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2288      	movs	r2, #136	; 0x88
 800276e:	2124      	movs	r1, #36	; 0x24
 8002770:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2101      	movs	r1, #1
 8002786:	438a      	bics	r2, r1
 8002788:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <HAL_UARTEx_DisableFifoMode+0x70>)
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2288      	movs	r2, #136	; 0x88
 80027a4:	2120      	movs	r1, #32
 80027a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2284      	movs	r2, #132	; 0x84
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	b004      	add	sp, #16
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	dfffffff 	.word	0xdfffffff

080027c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2284      	movs	r2, #132	; 0x84
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e02e      	b.n	8002836 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2284      	movs	r2, #132	; 0x84
 80027dc:	2101      	movs	r1, #1
 80027de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2288      	movs	r2, #136	; 0x88
 80027e4:	2124      	movs	r1, #36	; 0x24
 80027e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	08d9      	lsrs	r1, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	0018      	movs	r0, r3
 8002818:	f000 f854 	bl	80028c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2288      	movs	r2, #136	; 0x88
 8002828:	2120      	movs	r1, #32
 800282a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2284      	movs	r2, #132	; 0x84
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b004      	add	sp, #16
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2284      	movs	r2, #132	; 0x84
 800284e:	5c9b      	ldrb	r3, [r3, r2]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e02f      	b.n	80028b8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2284      	movs	r2, #132	; 0x84
 800285c:	2101      	movs	r1, #1
 800285e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2288      	movs	r2, #136	; 0x88
 8002864:	2124      	movs	r1, #36	; 0x24
 8002866:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	438a      	bics	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f813 	bl	80028c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2288      	movs	r2, #136	; 0x88
 80028aa:	2120      	movs	r1, #32
 80028ac:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2284      	movs	r2, #132	; 0x84
 80028b2:	2100      	movs	r1, #0
 80028b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b004      	add	sp, #16
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	f1ffffff 	.word	0xf1ffffff

080028c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d108      	bne.n	80028e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	226a      	movs	r2, #106	; 0x6a
 80028d8:	2101      	movs	r1, #1
 80028da:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2268      	movs	r2, #104	; 0x68
 80028e0:	2101      	movs	r1, #1
 80028e2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80028e4:	e043      	b.n	800296e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80028e6:	260f      	movs	r6, #15
 80028e8:	19bb      	adds	r3, r7, r6
 80028ea:	2208      	movs	r2, #8
 80028ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80028ee:	200e      	movs	r0, #14
 80028f0:	183b      	adds	r3, r7, r0
 80028f2:	2208      	movs	r2, #8
 80028f4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	0e5b      	lsrs	r3, r3, #25
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	240d      	movs	r4, #13
 8002902:	193b      	adds	r3, r7, r4
 8002904:	2107      	movs	r1, #7
 8002906:	400a      	ands	r2, r1
 8002908:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	0f5b      	lsrs	r3, r3, #29
 8002912:	b2da      	uxtb	r2, r3
 8002914:	250c      	movs	r5, #12
 8002916:	197b      	adds	r3, r7, r5
 8002918:	2107      	movs	r1, #7
 800291a:	400a      	ands	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800291e:	183b      	adds	r3, r7, r0
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	197a      	adds	r2, r7, r5
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	4914      	ldr	r1, [pc, #80]	; (8002978 <UARTEx_SetNbDataToProcess+0xb4>)
 8002928:	5c8a      	ldrb	r2, [r1, r2]
 800292a:	435a      	muls	r2, r3
 800292c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800292e:	197b      	adds	r3, r7, r5
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <UARTEx_SetNbDataToProcess+0xb8>)
 8002934:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002936:	0019      	movs	r1, r3
 8002938:	f7fd fc6c 	bl	8000214 <__divsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	b299      	uxth	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	226a      	movs	r2, #106	; 0x6a
 8002944:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002946:	19bb      	adds	r3, r7, r6
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	193a      	adds	r2, r7, r4
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	490a      	ldr	r1, [pc, #40]	; (8002978 <UARTEx_SetNbDataToProcess+0xb4>)
 8002950:	5c8a      	ldrb	r2, [r1, r2]
 8002952:	435a      	muls	r2, r3
 8002954:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002956:	193b      	adds	r3, r7, r4
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	4a08      	ldr	r2, [pc, #32]	; (800297c <UARTEx_SetNbDataToProcess+0xb8>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800295e:	0019      	movs	r1, r3
 8002960:	f7fd fc58 	bl	8000214 <__divsi3>
 8002964:	0003      	movs	r3, r0
 8002966:	b299      	uxth	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2268      	movs	r2, #104	; 0x68
 800296c:	5299      	strh	r1, [r3, r2]
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b005      	add	sp, #20
 8002974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	08002a68 	.word	0x08002a68
 800297c:	08002a70 	.word	0x08002a70

08002980 <__libc_init_array>:
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	2600      	movs	r6, #0
 8002984:	4d0c      	ldr	r5, [pc, #48]	; (80029b8 <__libc_init_array+0x38>)
 8002986:	4c0d      	ldr	r4, [pc, #52]	; (80029bc <__libc_init_array+0x3c>)
 8002988:	1b64      	subs	r4, r4, r5
 800298a:	10a4      	asrs	r4, r4, #2
 800298c:	42a6      	cmp	r6, r4
 800298e:	d109      	bne.n	80029a4 <__libc_init_array+0x24>
 8002990:	2600      	movs	r6, #0
 8002992:	f000 f821 	bl	80029d8 <_init>
 8002996:	4d0a      	ldr	r5, [pc, #40]	; (80029c0 <__libc_init_array+0x40>)
 8002998:	4c0a      	ldr	r4, [pc, #40]	; (80029c4 <__libc_init_array+0x44>)
 800299a:	1b64      	subs	r4, r4, r5
 800299c:	10a4      	asrs	r4, r4, #2
 800299e:	42a6      	cmp	r6, r4
 80029a0:	d105      	bne.n	80029ae <__libc_init_array+0x2e>
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
 80029a4:	00b3      	lsls	r3, r6, #2
 80029a6:	58eb      	ldr	r3, [r5, r3]
 80029a8:	4798      	blx	r3
 80029aa:	3601      	adds	r6, #1
 80029ac:	e7ee      	b.n	800298c <__libc_init_array+0xc>
 80029ae:	00b3      	lsls	r3, r6, #2
 80029b0:	58eb      	ldr	r3, [r5, r3]
 80029b2:	4798      	blx	r3
 80029b4:	3601      	adds	r6, #1
 80029b6:	e7f2      	b.n	800299e <__libc_init_array+0x1e>
 80029b8:	08002a78 	.word	0x08002a78
 80029bc:	08002a78 	.word	0x08002a78
 80029c0:	08002a78 	.word	0x08002a78
 80029c4:	08002a7c 	.word	0x08002a7c

080029c8 <memset>:
 80029c8:	0003      	movs	r3, r0
 80029ca:	1882      	adds	r2, r0, r2
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d100      	bne.n	80029d2 <memset+0xa>
 80029d0:	4770      	bx	lr
 80029d2:	7019      	strb	r1, [r3, #0]
 80029d4:	3301      	adds	r3, #1
 80029d6:	e7f9      	b.n	80029cc <memset+0x4>

080029d8 <_init>:
 80029d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029de:	bc08      	pop	{r3}
 80029e0:	469e      	mov	lr, r3
 80029e2:	4770      	bx	lr

080029e4 <_fini>:
 80029e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ea:	bc08      	pop	{r3}
 80029ec:	469e      	mov	lr, r3
 80029ee:	4770      	bx	lr
